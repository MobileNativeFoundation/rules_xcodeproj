import PathKit
import XcodeProj

extension Generator {
    /// Creates an array of `XCScheme` entries for the specified targets.
    static func createAutogeneratedXCSchemes(
        schemeAutogenerationMode: SchemeAutogenerationMode,
        buildMode: BuildMode,
        filePathResolver: FilePathResolver,
        pbxTargets: [ConsolidatedTarget.Key: PBXTarget]
    ) throws -> [XCScheme] {
        guard schemeAutogenerationMode != .none else {
            return []
        }
        let referencedContainer = filePathResolver.containerReference
        return try pbxTargets.compactMap { _, pbxTarget in
            try createXCScheme(
                buildMode: buildMode,
                referencedContainer: referencedContainer,
                pbxTarget: pbxTarget
            )
        }
    }

    // GH399: Derive the defaultLastUpgradeVersion
    private static let defaultLastUpgradeVersion = "1320"
    private static let lldbInitVersion = "1.7"

    /// Creates an `XCScheme` for the specified target.
    private static func createXCScheme(
        buildMode: BuildMode,
        referencedContainer: String,
        pbxTarget: PBXTarget
    ) throws -> XCScheme? {
        guard pbxTarget.shouldCreateScheme else {
            return nil
        }

        let isLaunchable = pbxTarget.isLaunchable
        let isTestable = pbxTarget.isTestable
        let productType = pbxTarget.productType ?? .none

        let buildableReference = try pbxTarget.createBuildableReference(
            referencedContainer: referencedContainer
        )
        let buildConfigurationName = pbxTarget.defaultBuildConfigurationName
        let runnables = createRunnables(
            buildableReference: buildableReference,
            isLaunchable: isLaunchable,
            isTestable: isTestable
        )
        let macroExpansions = createMacroExpansions(
            buildableReference: buildableReference,
            isTestable: isTestable
        )
        let selectedIdentifiers = createSelectedIdentifiers(
            productType: productType
        )
        let launchAutomaticallySubstyle = productType
            .launchAutomaticallySubstyle

        let buildAction = XCScheme.BuildAction(
            buildActionEntries: [.init(
                buildableReference: buildableReference,
                buildFor: [
                    .running,
                    .testing,
                    .profiling,
                    .archiving,
                    .analyzing,
                ]
            )],
            // swiftlint:disable:previous trailing_comma
            preActions: createBuildPreActions(
                buildMode: buildMode,
                pbxTarget: pbxTarget,
                buildableReference: buildableReference
            ),
            parallelizeBuild: true,
            buildImplicitDependencies: true
        )
        let launchAction = XCScheme.LaunchAction(
            runnable: runnables.launch,
            buildConfiguration: buildConfigurationName,
            macroExpansion: macroExpansions.launch,
            selectedDebuggerIdentifier: selectedIdentifiers.debugger,
            selectedLauncherIdentifier: selectedIdentifiers.launcher,
            environmentVariables: buildMode.usesBazelEnvironmentVariables ?
                productType.bazelLaunchEnvironmentVariables : nil,
            launchAutomaticallySubstyle: launchAutomaticallySubstyle,
            customLLDBInitFile: "$(BAZEL_LLDB_INIT)"
        )
        let testAction = XCScheme.TestAction(
            buildConfiguration: buildConfigurationName,
            macroExpansion: macroExpansions.test,
            testables: createTestables(
                buildableReference: buildableReference,
                isTestable: isTestable
            ),
            customLLDBInitFile: "$(BAZEL_LLDB_INIT)"
        )
        let profileAction = XCScheme.ProfileAction(
            buildableProductRunnable: runnables.profile,
            buildConfiguration: buildConfigurationName
        )
        let analyzeAction = XCScheme.AnalyzeAction(
            buildConfiguration: buildConfigurationName
        )
        let archiveAction = XCScheme.ArchiveAction(
            buildConfiguration: buildConfigurationName,
            revealArchiveInOrganizer: true
        )

        return XCScheme(
            name: pbxTarget.schemeName,
            lastUpgradeVersion: defaultLastUpgradeVersion,
            version: lldbInitVersion,
            buildAction: buildAction,
            testAction: testAction,
            launchAction: launchAction,
            profileAction: profileAction,
            analyzeAction: analyzeAction,
            archiveAction: archiveAction,
            wasCreatedForAppExtension: productType.isExtension ? true : nil
        )
    }

    private static func createRunnables(
        buildableReference: XCScheme.BuildableReference,
        isLaunchable: Bool,
        isTestable: Bool
    ) -> (
        launch: XCScheme.Runnable?,
        profile: XCScheme.BuildableProductRunnable?
    ) {
        guard !isTestable else {
            return (launch: nil, profile: nil)
        }

        let runnable: XCScheme.BuildableProductRunnable? = isLaunchable ?
            .init(buildableReference: buildableReference) : nil

        return (launch: runnable, profile: runnable)
    }

    private static func createMacroExpansions(
        buildableReference: XCScheme.BuildableReference,
        isTestable: Bool
    ) -> (
        launch: XCScheme.BuildableReference?,
        test: XCScheme.BuildableReference?
    ) {
        if isTestable {
            return (launch: buildableReference, test: nil)
        } else {
            return (launch: nil, test: nil)
        }
    }

    private static func createSelectedIdentifiers(
        productType: PBXProductType
    ) -> (launcher: String, debugger: String) {
        if productType.canUseDebugLauncher {
            return (
                launcher: XCScheme.defaultLauncher,
                debugger: XCScheme.defaultDebugger
            )
        } else {
            return (
                launcher: "Xcode.IDEFoundation.Launcher.PosixSpawn",
                debugger: ""
            )
        }
    }

    private static func createTestables(
        buildableReference: XCScheme.BuildableReference,
        isTestable: Bool
    ) -> [XCScheme.TestableReference] {
        guard isTestable else {
            return []
        }

        return [.init(
            skipped: false,
            buildableReference: buildableReference
        )]
    }

    private static func createBuildPreActions(
        buildMode: BuildMode,
        pbxTarget: PBXTarget,
        buildableReference: XCScheme.BuildableReference
    ) -> [XCScheme.ExecutionAction] {
        guard
            buildMode.usesBazelModeBuildScripts
        else {
            return []
        }

        let scriptText: String
        if pbxTarget is PBXNativeTarget {
            scriptText = #"""
mkdir -p "${BAZEL_BUILD_OUTPUT_GROUPS_FILE%/*}"
echo "b $BAZEL_TARGET_ID" > "$BAZEL_BUILD_OUTPUT_GROUPS_FILE"

"""#
        } else {
            scriptText = #"""
if [[ -s "$BAZEL_BUILD_OUTPUT_GROUPS_FILE" ]]; then
    rm "$BAZEL_BUILD_OUTPUT_GROUPS_FILE"
fi

"""#
        }

        return [XCScheme.ExecutionAction(
            scriptText: scriptText,
            title: "Set Bazel Build Output Groups",
            environmentBuildable: buildableReference
        )]
        // swiftlint:disable:previous trailing_comma
    }
}
