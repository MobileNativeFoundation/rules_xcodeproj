import XcodeProj

extension Generator {
    /// Creates an `XCUserData`.
    static func createXCUserData(
        userName: String,
        schemes: [XCScheme],
        autogeneratedSchemes: [XCScheme],
        targets: [PBXTarget]
    ) -> XCUserData {
        var sortedSchemeUserStates = schemes.enumerated().map { (index, scheme) in
            return XCSchemeManagement.UserStateScheme(
                name: "\(scheme.name).xcscheme",
                shared: true,
                orderHint: index,
                isShown: true
            )
        }
        
        let targetNameDict = Dictionary(uniqueKeysWithValues: targets.map{ ($0.schemeName, $0) })
        let sortedAutogeneratedSchemes = autogeneratedSchemes.sorted { (schemeA, schemeB) in
            let isSchemeATopLevel = targetNameDict[schemeA.name]!.isTopLevel
            let isSchemeBTopLevel = targetNameDict[schemeB.name]!.isTopLevel
            // xor, prioritze isTopLevel comparsion then alphabetical if both scheme are top level or not top level
            if (isSchemeATopLevel != isSchemeBTopLevel) {
                return isSchemeATopLevel
            }
            return schemeA.name < schemeB.name
        }
        
        let startingOrderHint = schemes.count
        sortedSchemeUserStates.append(contentsOf: sortedAutogeneratedSchemes.enumerated().map { (index, scheme) in
            return XCSchemeManagement.UserStateScheme(
                name: "\(scheme.name).xcscheme",
                shared: true,
                orderHint: startingOrderHint + index,
                isShown: true
            )
        })
        
        return XCUserData(
            userName: userName,
            schemes: [],
            schemeManagement: XCSchemeManagement(schemeUserState: sortedSchemeUserStates)
        )
    }
}
