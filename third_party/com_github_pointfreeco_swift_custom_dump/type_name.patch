--- Sources/CustomDump/Diff.swift
+++ Sources/CustomDump/Diff.swift
@@ -71,7 +71,7 @@ public func diff<T>(_ lhs: T, _ rhs: T, format: DiffFormat = .default) -> String
       )
     }

-    guard lhsMirror.subjectType == rhsMirror.subjectType
+    guard type(of: lhs) == type(of: rhs)
     else {
       diffEverything()
       return out
@@ -320,7 +320,7 @@ public func diff<T>(_ lhs: T, _ rhs: T, format: DiffFormat = .default) -> String
     case let (lhs as AnyObject, .class?, rhs as AnyObject, .class?):
       let lhsItem = ObjectIdentifier(lhs)
       let rhsItem = ObjectIdentifier(rhs)
-      let subjectType = typeName(lhsMirror.subjectType)
+      let subjectType = typeName(type(of: lhs))
       if visitedItems.contains(lhsItem) || visitedItems.contains(rhsItem) {
         print(
           "\(lhsName.map { "\($0): " } ?? "")\(subjectType)(↩︎)"

--- Sources/CustomDump/Dump.swift
+++ Sources/CustomDump/Dump.swift
@@ -181,7 +181,7 @@ func _customDump<T, TargetStream>(
         return id > 1 ? "#\(id)" : ""
       }
       if visitedItems.contains(item) {
-        out.write("\(typeName(mirror.subjectType))\(id)(↩︎)")
+        out.write("\(typeName(type(of: value)))\(id)(↩︎)")
       } else {
         visitedItems.insert(item)
         occurrence += 1
@@ -194,7 +194,7 @@ func _customDump<T, TargetStream>(
         }
         dumpChildren(
           of: Mirror(value, children: children),
-          prefix: "\(typeName(mirror.subjectType))\(id)(",
+          prefix: "\(typeName(type(of: value)))\(id)(",
           suffix: ")"
         )
       }
