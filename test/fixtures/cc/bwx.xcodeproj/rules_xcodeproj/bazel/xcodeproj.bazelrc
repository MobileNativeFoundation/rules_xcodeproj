### `--config=rules_xcodeproj`
#
# `rules_xcodeproj` is the base config of `rules_xcodeproj_*` configs.
# Add to this config if you want something to apply to all builds (which should
# be most settings), as the various configs (e.g. `rules_xcodeproj_indexbuild`)
# don't inherit from `rules_xcodeproj_build`. This allows
# `rules_xcodeproj_build` to strictly apply to the normal build.

common:rules_xcodeproj --verbose_failures

# We default to `dbg` since debugging is broken otherwise
build:rules_xcodeproj --compilation_mode=dbg

# Not using `--define=apple.experimental.tree_artifact_outputs=1` is slow (we
# have to unzip an archive on each build). If this doesn't work for your
# project, you can set `--define=apple.experimental.tree_artifact_outputs=0`
# on `build:rules_xcodeproj` in your `.bazelrc` or `xcodeproj.bazelrc` file.
build:rules_xcodeproj --define=apple.experimental.tree_artifact_outputs=1

# Fix Test Issue navigation
build:rules_xcodeproj --features=apple.swizzle_absolute_xcttestsourcelocation

# `oso_prefix_is_pwd` removes absolute paths in debug info, which increases
# cache hit rates. We "undo" this in `bazel.lldbinit`, so debugging still works.
build:rules_xcodeproj --features=oso_prefix_is_pwd

# `relative_ast_path` uses relative paths when passing `--add_ast_path` to the
# linker, which increases cache hit rates. We "undo" this in `bazel.lldbinit`,
# so debugging still works.
build:rules_xcodeproj --features=relative_ast_path

# `swift.cacheable_swiftmodules` passes `-no-serialize-debugging-options` to
# `swiftc`, which fixes lldb crashes and increases cache hit rates. We "undo"
# this in `swift_debug_settings.py`, so debugging still works.
build:rules_xcodeproj --features=swift.cacheable_swiftmodules

# `swift.index-while-building` passes `-index-store-path` to `swiftc`, which
# generates index store data. We enable this globally, even though we only need
# it for the normal build, since it's better to get cache hits between normal
# and Index Build builds than it is to save some time in an uncached Index Store
# build. It also makes it easier to disable in your `.bazelrc` files. We only
# download the outputs in the normal build though, saving some bandwidth/disk
# space.
build:rules_xcodeproj --features=swift.index_while_building
build:rules_xcodeproj --features=swift.use_global_index_store

### `--config=rules_xcodeproj_generator`
#
# Used when generating a project.

build:rules_xcodeproj_generator --config=rules_xcodeproj

# `--show_result=0` prevents intermediate outputs from displaying in the logs
build:rules_xcodeproj_generator --show_result=0

### `--config=rules_xcodeproj_info`
#
# Used when querying `bazel info`.

info:rules_xcodeproj_info --config=rules_xcodeproj

# Filter out extra noise
info:rules_xcodeproj_info --ui_event_filters=-INFO,-WARNING

### `--config=rules_xcodeproj_build`
#
# Used when doing a normal build.

build:rules_xcodeproj_build --config=rules_xcodeproj

### `--config=rules_xcodeproj_indexbuild`
#
# Used when doing an Index build.

build:rules_xcodeproj_indexbuild --config=rules_xcodeproj

# Disable BES for Index Builds, as it runs a lot, and isn't user invoked
build:rules_xcodeproj_indexbuild --bes_backend= --bes_results_url=

### `--config=rules_xcodeproj_swiftuipreviews`
#
# Used when doing a SwiftUI Previews build.

build:rules_xcodeproj_swiftuipreviews --config=rules_xcodeproj

# `swiftc` flags needed for SwiftUI Previews
build:rules_xcodeproj_swiftuipreviews --swiftcopt=-Xfrontend --swiftcopt=-enable-implicit-dynamic
build:rules_xcodeproj_swiftuipreviews --swiftcopt=-Xfrontend --swiftcopt=-enable-private-imports
build:rules_xcodeproj_swiftuipreviews --swiftcopt=-Xfrontend --swiftcopt=-enable-dynamic-replacement-chaining

# Unset `swift.index-while-building` since we don't need index store data, and
# we already have cache misses from the `swiftc` flags above
build:rules_xcodeproj_swiftuipreviews --features=-swift.index_while_building

### Project specific configs

# Import `xcodeproj.bazelrc` if it exists
try-import %workspace%/xcodeproj.bazelrc
